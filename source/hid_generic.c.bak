/*
 * Copyright (c) 2015 - 2016, Freescale Semiconductor, Inc.
 * Copyright 2016 - 2017 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <board.h>
#include <clock_config.h>
#include <device/fsl_device_registers.h>
#include "fsl_debug_console.h"

#include <stdio.h>
#include <stdlib.h>
#if (defined(FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))
#include "fsl_sysmpu.h"
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */

#include "pin_mux.h"

#include "hid_generic.h"

#if 1 //nsmoon@190416
#include "bootloader.h"
#endif

/*******************************************************************************
 * Definitions
 ******************************************************************************/

#if (_DEBUG == 1) //nsmoon@190416
#define TRACE_HID(...) //usb_echo(__VA_ARGS__);usb_echo("\r\n")
#else
#define TRACE_HID(...)
#endif
#define TRACE_INFO(...) usb_echo(__VA_ARGS__);usb_echo("\r\n")
#define TRACE_ERROR(...) usb_echo(__VA_ARGS__);usb_echo("\r\n")

/*******************************************************************************
 * Prototypes
 ******************************************************************************/
void BOARD_InitHardware(void);
void USB_DeviceClockInit(void);
void USB_DeviceIsrEnable(void);
#if USB_DEVICE_CONFIG_USE_TASK
void USB_DeviceTaskFn(void *deviceHandle);
#endif

static usb_status_t USB_DeviceHidGenericCallback(class_handle_t handle, uint32_t event, void *param);
static usb_status_t USB_DeviceCallback(usb_device_handle handle, uint32_t event, void *param);
#if 1 //nsmoon@190416
void USB_DeviceApplicationInit(void);
#endif

/*******************************************************************************
 * Variables
 ******************************************************************************/
#if 1 //nsmoon@190416
USB_DMA_NONINIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE) static uint32_t s_GenericBuff0[USB_HID_GENERIC_OUT_BUFFER_LENGTH];
USB_DMA_NONINIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE) static uint32_t s_GenericBuffRx[USB_HID_GENERIC_OUT_BUFFER_LENGTH];
#endif
usb_hid_generic_struct_t g_UsbDeviceHidGeneric;

extern usb_device_class_struct_t g_UsbDeviceHidGenericConfig;

/* Set class configurations */
usb_device_class_config_struct_t g_UsbDeviceHidConfig[1] = {{
    USB_DeviceHidGenericCallback, /* HID generic class callback pointer */
    (class_handle_t)NULL,         /* The HID class handle, This field is set by USB_DeviceClassInit */
    &g_UsbDeviceHidGenericConfig, /* The HID mouse configuration, including class code, subcode, and protocol, class
                             type,
                             transfer type, endpoint address, max packet size, etc.*/
}};

/* Set class configuration list */
usb_device_class_config_list_struct_t g_UsbDeviceHidConfigList = {
    g_UsbDeviceHidConfig, /* Class configurations */
    USB_DeviceCallback,   /* Device callback pointer */
    1U,                   /* Class count */
};

/*******************************************************************************
 * Code
 ******************************************************************************/

ATTRIBUTE_RAMFUNC
void USB_DeviceClockInit(void)
{
    usb_phy_config_struct_t phyConfig = {
        BOARD_USB_PHY_D_CAL, 
        BOARD_USB_PHY_TXCAL45DP, 
        BOARD_USB_PHY_TXCAL45DM,
    };

    if (CONTROLLER_ID == kUSB_ControllerEhci0)
    {
        CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M, 480000000U);
    }
    else
    {
        CLOCK_EnableUsbhs1PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs1Clock(kCLOCK_Usb480M, 480000000U);
    }
    USB_EhciPhyInit(CONTROLLER_ID, BOARD_XTAL0_CLK_HZ, &phyConfig);
}

ATTRIBUTE_RAMFUNC
void USB_DeviceIsrEnable(void)
{
    uint8_t irqNumber;

    uint8_t usbDeviceEhciIrq[] = USBHS_IRQS;
    irqNumber = usbDeviceEhciIrq[CONTROLLER_ID - kUSB_ControllerEhci0];

    /* Install isr, set priority, and enable IRQ. */
    NVIC_SetPriority((IRQn_Type)irqNumber, USB_DEVICE_INTERRUPT_PRIORITY);
    EnableIRQ((IRQn_Type)irqNumber);
}
#if USB_DEVICE_CONFIG_USE_TASK
void USB_DeviceTaskFn(void *deviceHandle)
{
    USB_DeviceEhciTaskFunction(deviceHandle);
}
#endif

/* The hid class callback */
ATTRIBUTE_RAMFUNC
static usb_status_t USB_DeviceHidGenericCallback(class_handle_t handle, uint32_t event, void *param)
{
    usb_status_t error = kStatus_USB_Error;

    switch (event)
    {
        case kUSB_DeviceHidEventSendResponse:
#if 1 //nsmoon@190416
            if (g_UsbDeviceHidGeneric.attach) {
            	g_UsbDeviceHidGeneric.DataSent = 1U;
            }
#endif
            break;
        case kUSB_DeviceHidEventRecvResponse:
#if 1 //nsmoon@190416
            if (g_UsbDeviceHidGeneric.attach) {
                error = USB_DeviceHidRecv(g_UsbDeviceHidGeneric.hidHandle, USB_HID_GENERIC_ENDPOINT_OUT,
                                  (uint8_t *)&g_UsbDeviceHidGeneric.buffRx[0], USB_HID_GENERIC_OUT_BUFFER_LENGTH);
            	g_UsbDeviceHidGeneric.DataRecv = 1U;
                return error;
            }
#endif
            break;
        case kUSB_DeviceHidEventGetReport:
        case kUSB_DeviceHidEventSetReport:
        case kUSB_DeviceHidEventRequestReportBuffer:
            error = kStatus_USB_InvalidRequest;
            break;
        case kUSB_DeviceHidEventGetIdle:
        case kUSB_DeviceHidEventGetProtocol:
        case kUSB_DeviceHidEventSetIdle:
        case kUSB_DeviceHidEventSetProtocol:
            break;
        default:
            break;
    }

    return error;
}

/* The device callback */
ATTRIBUTE_RAMFUNC
static usb_status_t USB_DeviceCallback(usb_device_handle handle, uint32_t event, void *param)
{
    usb_status_t error = kStatus_USB_Success;
    uint8_t *temp8 = (uint8_t *)param;
    uint16_t *temp16 = (uint16_t *)param;

    switch (event)
    {
#if 1 //nsmoon@190416, FIXME
        case kUSB_DeviceEventDetach:
        {
        	TRACE_HID("BT_kUSB_DeviceEventDetach..");
            g_UsbDeviceHidGeneric.attach = 0U;
        }
            break;
#endif
        case kUSB_DeviceEventBusReset:
        {
        	TRACE_HID("BT_kUSB_DeviceEventBusReset..");
            /* USB bus reset signal detected */
            g_UsbDeviceHidGeneric.attach = 0U;
#if 1 //nsmoon@190416, FIXME
            g_UsbDeviceHidGeneric.currentConfiguration = 0U;
            g_UsbDeviceHidGeneric.readRequest = 0U;
#endif
#if (defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U)) || \
    (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
            /* Get USB speed to configure the device, including max packet size and interval of the endpoints. */
            if (kStatus_USB_Success == USB_DeviceClassGetSpeed(CONTROLLER_ID, &g_UsbDeviceHidGeneric.speed))
            {
                USB_DeviceSetSpeed(handle, g_UsbDeviceHidGeneric.speed);
            }
#endif
        }
        break;
        case kUSB_DeviceEventSetConfiguration:
        	TRACE_HID("BT_kUSB_DeviceEventSetConfiguration..");
            if (0U == (*temp8))
            {
                g_UsbDeviceHidGeneric.attach = 0U;
                g_UsbDeviceHidGeneric.currentConfiguration = 0U;
            }
            else if (USB_HID_GENERIC_CONFIGURE_INDEX == (*temp8))
            {
                /* Set device configuration request */
                g_UsbDeviceHidGeneric.attach = 1U;
                g_UsbDeviceHidGeneric.currentConfiguration = *temp8; 
                error = USB_DeviceHidRecv(
                    g_UsbDeviceHidGeneric.hidHandle, USB_HID_GENERIC_ENDPOINT_OUT,
                    //(uint8_t *)&g_UsbDeviceHidGeneric.buff0[0], //nsmoon@200603
					(uint8_t *)&g_UsbDeviceHidGeneric.buffRx[0],
                    USB_HID_GENERIC_OUT_BUFFER_LENGTH);
            	TRACE_INFO("BT_attached..");
            }
            else
            {
                error = kStatus_USB_InvalidRequest;
            }   
            break;
        case kUSB_DeviceEventSetInterface:
        	TRACE_HID("BT_kUSB_DeviceEventSetInterface..");
            if (g_UsbDeviceHidGeneric.attach)
            {
                /* Set device interface request */
                uint8_t interface = (uint8_t)((*temp16 & 0xFF00U) >> 0x08U);
                uint8_t alternateSetting = (uint8_t)(*temp16 & 0x00FFU);
                if (interface < USB_HID_GENERIC_INTERFACE_COUNT)
                {
                    g_UsbDeviceHidGeneric.currentInterfaceAlternateSetting[interface] = alternateSetting;
                    if (alternateSetting == 0U)
                    {
                        error = USB_DeviceHidRecv(
                            g_UsbDeviceHidGeneric.hidHandle, USB_HID_GENERIC_ENDPOINT_OUT,
                            //(uint8_t *)&g_UsbDeviceHidGeneric.buff0[0],  //nsmoon@200603
							(uint8_t *)&g_UsbDeviceHidGeneric.buffRx[0],
                            USB_HID_GENERIC_OUT_BUFFER_LENGTH);
                    }
                }
            }
            break;
        case kUSB_DeviceEventGetConfiguration:
        	TRACE_HID("BT_kUSB_DeviceEventGetConfiguration..");
            if (param)
            {
                /* Get current configuration request */
                *temp8 = g_UsbDeviceHidGeneric.currentConfiguration;
                error = kStatus_USB_Success;
            }
            break;
        case kUSB_DeviceEventGetInterface:
        	TRACE_HID("BT_kUSB_DeviceEventGetInterface..");
            if (param)
            {
                /* Get current alternate setting of the interface request */
                uint8_t interface = (uint8_t)((*temp16 & 0xFF00U) >> 0x08U);
                if (interface < USB_HID_GENERIC_INTERFACE_COUNT)
                {
                    *temp16 = (*temp16 & 0xFF00U) | g_UsbDeviceHidGeneric.currentInterfaceAlternateSetting[interface];
                    error = kStatus_USB_Success;
                }
                else
                {
                    error = kStatus_USB_InvalidRequest;
                }
            }
            break;
        case kUSB_DeviceEventGetDeviceDescriptor:
        	TRACE_HID("BT_kUSB_DeviceEventGetDeviceDescriptor..");
            if (param)
            {
                /* Get device descriptor request */
                error = USB_DeviceGetDeviceDescriptor(handle, (usb_device_get_device_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetConfigurationDescriptor:
        	TRACE_HID("BT_kUSB_DeviceEventGetConfigurationDescriptor..");
            if (param)
            {
                /* Get device configuration descriptor request */
                error = USB_DeviceGetConfigurationDescriptor(handle, 
                                                              (usb_device_get_configuration_descriptor_struct_t *)param);
            }
            break;
#if (defined(USB_DEVICE_CONFIG_CV_TEST) && (USB_DEVICE_CONFIG_CV_TEST > 0U))
        case kUSB_DeviceEventGetDeviceQualifierDescriptor:
            if (param)
            {
                /* Get device descriptor request */
                error = USB_DeviceGetDeviceQualifierDescriptor(
                    handle, (usb_device_get_device_qualifier_descriptor_struct_t *)param);
            }
            break;
#endif
        case kUSB_DeviceEventGetStringDescriptor:
        	TRACE_HID("BT_kUSB_DeviceEventGetStringDescriptor..");
            if (param)
            {
                /* Get device string descriptor request */
                error = USB_DeviceGetStringDescriptor(handle, (usb_device_get_string_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetHidDescriptor:
        	TRACE_HID("BT_kUSB_DeviceEventGetHidDescriptor..");
            if (param)
            {
                /* Get hid descriptor request */
                error = USB_DeviceGetHidDescriptor(handle, (usb_device_get_hid_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetHidReportDescriptor:
        	TRACE_HID("BT_kUSB_DeviceEventGetHidReportDescriptor..");
            if (param)
            {
                /* Get hid report descriptor request */
                error =
                    USB_DeviceGetHidReportDescriptor(handle, (usb_device_get_hid_report_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetHidPhysicalDescriptor:
        	TRACE_HID("BT_kUSB_DeviceEventGetHidPhysicalDescriptor..");
            if (param)
            {
                /* Get hid physical descriptor request */
                error = USB_DeviceGetHidPhysicalDescriptor(handle, 
                                                           (usb_device_get_hid_physical_descriptor_struct_t *)param);
            }
            break;
        default:
        	TRACE_HID("BT_USB unknown event.. %x", event);
            break;
    }

    return error;
}

ATTRIBUTE_RAMFUNC
void USB_DeviceApplicationInit(void)
{
    USB_DeviceClockInit();
#if (defined(FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))
    SYSMPU_Enable(SYSMPU, 0);
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */

    /* Set HID generic to default state */
#if 1 //nsmoon@190416
    g_UsbDeviceHidGeneric.speed = USB_SPEED_HIGH;
    g_UsbDeviceHidGeneric.DataSent = 1U; //ready to send
    g_UsbDeviceHidGeneric.DataRecv = 0U; //empty
    g_UsbDeviceHidGeneric.buff0 = (uint8_t *)&s_GenericBuff0[0];
	g_UsbDeviceHidGeneric.buffRx = (uint8_t *)&s_GenericBuffRx[0];
#endif
    g_UsbDeviceHidGeneric.attach = 0U;
    g_UsbDeviceHidGeneric.hidHandle = (class_handle_t)NULL;
    g_UsbDeviceHidGeneric.deviceHandle = NULL;

    /* Initialize the usb stack and class drivers */
    if (kStatus_USB_Success !=
        USB_DeviceClassInit(CONTROLLER_ID, &g_UsbDeviceHidConfigList, &g_UsbDeviceHidGeneric.deviceHandle))
    {
        TRACE_ERROR("BT_ERROR! USB device HID generic failed\r\n");
        return;
    }
    else
    {
        //usb_echo("USB device HID generic demo\r\n");
        /* Get the HID mouse class handle */
        g_UsbDeviceHidGeneric.hidHandle = g_UsbDeviceHidConfigList.config->classHandle;
    }

    USB_DeviceIsrEnable();

    /* Start USB device HID generic */
    USB_DeviceRun(g_UsbDeviceHidGeneric.deviceHandle);
}

void USB_DeviceApplicationDeinit(void)
{
    USB_DeviceStop(g_UsbDeviceHidGeneric.deviceHandle);
	USB_DeviceClassDeinit(CONTROLLER_ID);
	USB_EhciPhyDeinit(CONTROLLER_ID);
}

#if 1 //nsmoon@190416
ATTRIBUTE_RAMFUNC
int USB_DeviceReady(void)
{
	if (g_UsbDeviceHidGeneric.attach == 1U) {
		return USB_OK;
	}
	return USB_ERR;
}

ATTRIBUTE_RAMFUNC
int DATASTREAM_Ready(void)
{
	if (g_UsbDeviceHidGeneric.DataRecv == 1U) {
		return USB_OK;
	}
	return USB_ERR;
}

ATTRIBUTE_RAMFUNC
void DATASTREAM_RecvClear(void)
{
	g_UsbDeviceHidGeneric.DataRecv = 0U;
}

ATTRIBUTE_RAMFUNC
int DATASTREAM_Send(void)
{
	//PRINTF("send= %d %d %d %d \r\n", g_UsbDeviceHidGeneric.DataSent, g_UsbDeviceHidGeneric.readRequest, g_UsbDeviceHidGeneric.txCurPos, g_UsbDeviceHidGeneric.txMaxSize);
	if (g_UsbDeviceHidGeneric.DataSent) {
		if(g_UsbDeviceHidGeneric.readRequest) {
			if (g_UsbDeviceHidGeneric.txCurPos < g_UsbDeviceHidGeneric.txMaxSize) {
				g_UsbDeviceHidGeneric.DataSent = 0U;
		        USB_DeviceHidSend(g_UsbDeviceHidGeneric.hidHandle, USB_HID_GENERIC_ENDPOINT_IN,
		                              &g_UsbDeviceHidGeneric.buffTx[g_UsbDeviceHidGeneric.txCurPos],
									  USB_HID_GENERIC_IN_BUFFER_LENGTH);
		        g_UsbDeviceHidGeneric.txCurPos += USB_HID_GENERIC_IN_BUFFER_LENGTH;
			}
			else {
		        g_UsbDeviceHidGeneric.readRequest = 0U;
				//bootloaderData.usrBufferEventComplete = true;
				return USB_OK;
	        }
		}
	}
	return USB_ERR;
}

ATTRIBUTE_RAMFUNC
int DATASTREAM_Send_init(uint8_t *buff, const int bufsize)
{
	if (!g_UsbDeviceHidGeneric.readRequest) {
		g_UsbDeviceHidGeneric.buffTx = buff;
		g_UsbDeviceHidGeneric.readRequest = 1U; //from host
		g_UsbDeviceHidGeneric.txMaxSize = bufsize;
		g_UsbDeviceHidGeneric.txCurPos = 0;
		g_UsbDeviceHidGeneric.DataSent = 1U; //reset
		return USB_OK;
	}
	return USB_ERR;
}
#endif

/*end of file*/
